#!/usr/bin/env python3
"""
Script de corre√ß√£o r√°pida para os problemas identificados no SIGESCON.
Execute com: python scripts/quick_fixes.py
"""

import asyncio
import sys
import os
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncpg
from app.core.config import settings
from app.core.security import get_password_hash

async def fix_user_passwords(conn: asyncpg.Connection):
    """Corrige senhas dos usu√°rios de teste"""
    print("üîê Corrigindo senhas dos usu√°rios de teste...")
    
    usuarios_teste = [
        ("rafael.costa@pge.pa.gov.br", "senha123"),
        ("anderson.pontes@pge.pa.gov.br", "senha123")
    ]
    
    for email, nova_senha in usuarios_teste:
        # Busca usu√°rio
        usuario = await conn.fetchrow(
            "SELECT id, nome FROM usuario WHERE email = $1 AND ativo = TRUE",
            email
        )
        
        if usuario:
            # Atualiza senha
            nova_senha_hash = get_password_hash(nova_senha)
            await conn.execute(
                "UPDATE usuario SET senha = $1 WHERE id = $2",
                nova_senha_hash, usuario['id']
            )
            print(f"‚úÖ Senha atualizada para {usuario['nome']} ({email})")
        else:
            print(f"‚ö†Ô∏è Usu√°rio n√£o encontrado: {email}")

async def ensure_usuario_perfil_table(conn: asyncpg.Connection):
    """Garante que a tabela usuario_perfil existe e tem a estrutura correta"""
    print("üîß Verificando tabela usuario_perfil...")
    
    # Verifica se a tabela existe
    table_exists = await conn.fetchval("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'usuario_perfil'
        )
    """)
    
    if not table_exists:
        print("üì¶ Criando tabela usuario_perfil...")
        await conn.execute("""
            CREATE TABLE "usuario_perfil" (
                "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                "usuario_id" int NOT NULL,
                "perfil_id" int NOT NULL,
                "ativo" boolean NOT NULL DEFAULT TRUE,
                "concedido_por_usuario_id" int,
                "data_concessao" timestamp DEFAULT (now()),
                "observacoes" text,
                FOREIGN KEY ("usuario_id") REFERENCES "usuario" ("id"),
                FOREIGN KEY ("perfil_id") REFERENCES "perfil" ("id"),
                FOREIGN KEY ("concedido_por_usuario_id") REFERENCES "usuario" ("id"),
                UNIQUE("usuario_id", "perfil_id")
            );
        """)
        
        # Cria √≠ndices
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_usuario_perfil_usuario_id 
            ON usuario_perfil(usuario_id) WHERE ativo = TRUE;
        """)
        
        await conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_usuario_perfil_perfil_id 
            ON usuario_perfil(perfil_id) WHERE ativo = TRUE;
        """)
        
        print("‚úÖ Tabela usuario_perfil criada")
    else:
        print("‚úÖ Tabela usuario_perfil j√° existe")

async def migrate_existing_users_to_multiple_profiles(conn: asyncpg.Connection):
    """Migra usu√°rios existentes para o sistema de perfis m√∫ltiplos"""
    print("üë• Migrando usu√°rios para perfis m√∫ltiplos...")
    
    # Busca admin para usar como "concedido_por"
    admin_id = await conn.fetchval("""
        SELECT u.id FROM usuario u 
        JOIN perfil p ON u.perfil_id = p.id 
        WHERE p.nome = 'Administrador' AND u.ativo = TRUE 
        LIMIT 1
    """)
    
    if not admin_id:
        admin_id = 1  # Usa ID 1 como padr√£o
    
    # Busca usu√°rios que ainda n√£o foram migrados
    users_to_migrate = await conn.fetch("""
        SELECT u.id, u.nome, u.perfil_id
        FROM usuario u
        WHERE u.ativo = TRUE 
        AND u.perfil_id IS NOT NULL
        AND NOT EXISTS (
            SELECT 1 FROM usuario_perfil up 
            WHERE up.usuario_id = u.id AND up.ativo = TRUE
        )
    """)
    
    migrated_count = 0
    for user in users_to_migrate:
        try:
            await conn.execute("""
                INSERT INTO usuario_perfil (usuario_id, perfil_id, concedido_por_usuario_id, observacoes, ativo)
                VALUES ($1, $2, $3, $4, TRUE)
                ON CONFLICT (usuario_id, perfil_id) DO NOTHING
            """, user['id'], user['perfil_id'], admin_id, 'Migra√ß√£o autom√°tica - corre√ß√£o r√°pida')
            
            migrated_count += 1
            print(f"‚úÖ Migrado usu√°rio ID {user['id']}: {user['nome']}")
            
        except Exception as e:
            print(f"‚ùå Erro ao migrar usu√°rio {user['nome']}: {e}")
    
    print(f"üìä Total migrado: {migrated_count} usu√°rios")

async def setup_test_users_with_multiple_profiles(conn: asyncpg.Connection):
    """Configura usu√°rios de teste com m√∫ltiplos perfis"""
    print("üé≠ Configurando usu√°rios de teste com perfis m√∫ltiplos...")
    
    # Busca IDs dos perfis
    perfil_fiscal = await conn.fetchval("SELECT id FROM perfil WHERE nome = 'Fiscal'")
    perfil_gestor = await conn.fetchval("SELECT id FROM perfil WHERE nome = 'Gestor'")
    admin_id = 1
    
    if not (perfil_fiscal and perfil_gestor):
        print("‚ùå Perfis Fiscal/Gestor n√£o encontrados")
        return
    
    # Usu√°rios de teste
    usuarios_teste = [
        ("rafael.costa@pge.pa.gov.br", "Rafael Costa"),
        ("anderson.pontes@pge.pa.gov.br", "Anderson Pontes")
    ]
    
    for email, nome in usuarios_teste:
        # Busca usu√°rio
        usuario = await conn.fetchrow(
            "SELECT id FROM usuario WHERE email = $1 AND ativo = TRUE",
            email
        )
        
        if not usuario:
            print(f"‚ö†Ô∏è Usu√°rio n√£o encontrado: {nome}")
            continue
        
        usuario_id = usuario['id']
        
        # Adiciona perfis m√∫ltiplos
        for perfil_id, perfil_nome in [(perfil_fiscal, "Fiscal"), (perfil_gestor, "Gestor")]:
            try:
                await conn.execute("""
                    INSERT INTO usuario_perfil (usuario_id, perfil_id, concedido_por_usuario_id, observacoes, ativo)
                    VALUES ($1, $2, $3, $4, TRUE)
                    ON CONFLICT (usuario_id, perfil_id) 
                    DO UPDATE SET ativo = TRUE, observacoes = $4
                """, usuario_id, perfil_id, admin_id, f"Usu√°rio de teste com perfil {perfil_nome}")
                
                print(f"‚úÖ Perfil {perfil_nome} adicionado a {nome}")
                
            except Exception as e:
                print(f"‚ùå Erro ao adicionar perfil {perfil_nome} a {nome}: {e}")

async def verify_system_status(conn: asyncpg.Connection):
    """Verifica o status do sistema ap√≥s as corre√ß√µes"""
    print("\nüîç Verificando status do sistema...")
    
    # Verifica usu√°rios com perfis m√∫ltiplos
    users_with_multiple_profiles = await conn.fetch("""
        SELECT u.nome, u.email, string_agg(p.nome, ', ') as perfis
        FROM usuario u
        JOIN usuario_perfil up ON u.id = up.usuario_id AND up.ativo = TRUE
        JOIN perfil p ON up.perfil_id = p.id
        WHERE u.ativo = TRUE
        GROUP BY u.id, u.nome, u.email
        HAVING count(p.id) > 1
        ORDER BY u.nome
    """)
    
    if users_with_multiple_profiles:
        print(f"üë• Usu√°rios com m√∫ltiplos perfis ({len(users_with_multiple_profiles)}):")
        for user in users_with_multiple_profiles:
            print(f"  ‚Ä¢ {user['nome']} ({user['email']}): {user['perfis']}")
    else:
        print("‚ö†Ô∏è Nenhum usu√°rio com m√∫ltiplos perfis encontrado")
    
    # Verifica usu√°rios de teste espec√≠ficos
    test_users = ["rafael.costa@pge.pa.gov.br", "anderson.pontes@pge.pa.gov.br"]
    
    print("\nüß™ Status dos usu√°rios de teste:")
    for email in test_users:
        user_info = await conn.fetchrow("""
            SELECT u.nome, u.email,
                   array_agg(p.nome ORDER BY p.nome) as perfis
            FROM usuario u
            LEFT JOIN usuario_perfil up ON u.id = up.usuario_id AND up.ativo = TRUE
            LEFT JOIN perfil p ON up.perfil_id = p.id
            WHERE u.email = $1 AND u.ativo = TRUE
            GROUP BY u.id, u.nome, u.email
        """, email)
        
        if user_info:
            perfis = user_info['perfis'] if user_info['perfis'] and user_info['perfis'][0] else []
            print(f"  ‚úÖ {user_info['nome']}: {', '.join(perfis) if perfis else 'Sem perfis'}")
        else:
            print(f"  ‚ùå Usu√°rio n√£o encontrado: {email}")

async def main():
    """Executa todas as corre√ß√µes"""
    print("üöÄ SIGESCON - Script de Corre√ß√£o R√°pida")
    print("=" * 50)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    try:
        # Conecta ao banco
        conn = await asyncpg.connect(settings.DATABASE_URL)
        print("‚úÖ Conectado ao banco de dados")
        
        # Executa corre√ß√µes
        await ensure_usuario_perfil_table(conn)
        await migrate_existing_users_to_multiple_profiles(conn)
        await fix_user_passwords(conn)
        await setup_test_users_with_multiple_profiles(conn)
        await verify_system_status(conn)
        
        print("\nüéâ CORRE√á√ïES APLICADAS COM SUCESSO!")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("1. Execute o script de teste:")
        print("   python scripts/test_multiple_profiles_complete.py")
        print()
        print("2. Teste os endpoints manualmente:")
        print("   - POST /auth/login")
        print("   - GET /auth/contexto") 
        print("   - POST /auth/alternar-perfil")
        print()
        print("3. Verifique a documenta√ß√£o em:")
        print("   - http://127.0.0.1:8000/docs")
        
    except Exception as e:
        print(f"‚ùå Erro durante as corre√ß√µes: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    finally:
        if 'conn' in locals():
            await conn.close()
            print("\nüîå Conex√£o com banco encerrada")
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())