#!/usr/bin/env python3
"""
Script para migrar o sistema de perfil único para perfis múltiplos.
Execute com: python scripts/migrate_to_multiple_profiles.py
"""

import asyncio
import sys
import os
from datetime import datetime
import dotenv

# Adiciona o diretório raiz ao path
dotenv.load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '..', '.env'))

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


import asyncpg
from app.core.config import settings

async def create_multiple_profiles_tables(conn: asyncpg.Connection):
    """Cria as tabelas necessárias para o sistema de perfis múltiplos"""
    
    print("🔧 Criando tabela usuario_perfil...")
    
    # Cria a tabela usuario_perfil
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS "usuario_perfil" (
            "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "usuario_id" int NOT NULL,
            "perfil_id" int NOT NULL,
            "ativo" boolean NOT NULL DEFAULT TRUE,
            "concedido_por_usuario_id" int,
            "data_concessao" timestamp DEFAULT (now()),
            "observacoes" text,
            FOREIGN KEY ("usuario_id") REFERENCES "usuario" ("id"),
            FOREIGN KEY ("perfil_id") REFERENCES "perfil" ("id"),
            FOREIGN KEY ("concedido_por_usuario_id") REFERENCES "usuario" ("id"),
            UNIQUE("usuario_id", "perfil_id")
        );
    """)
    
    # Cria índices
    await conn.execute("""
        CREATE INDEX IF NOT EXISTS idx_usuario_perfil_usuario_id 
        ON usuario_perfil(usuario_id) WHERE ativo = TRUE;
    """)
    
    await conn.execute("""
        CREATE INDEX IF NOT EXISTS idx_usuario_perfil_perfil_id 
        ON usuario_perfil(perfil_id) WHERE ativo = TRUE;
    """)
    
    # Cria view
    await conn.execute("""
        CREATE OR REPLACE VIEW v_usuario_perfis AS
        SELECT 
            u.id as usuario_id,
            u.nome as usuario_nome,
            u.email,
            array_agg(p.nome ORDER BY p.nome) as perfis,
            array_agg(p.id ORDER BY p.nome) as perfil_ids,
            string_agg(p.nome, ', ' ORDER BY p.nome) as perfis_texto
        FROM usuario u
        LEFT JOIN usuario_perfil up ON u.id = up.usuario_id AND up.ativo = TRUE
        LEFT JOIN perfil p ON up.perfil_id = p.id AND p.ativo = TRUE
        WHERE u.ativo = TRUE
        GROUP BY u.id, u.nome, u.email;
    """)
    
    print("✅ Tabelas criadas com sucesso!")

async def migrate_existing_users(conn: asyncpg.Connection):
    """Migra usuários existentes do sistema de perfil único"""
    
    print("📋 Migrando usuários existentes...")
    
    # Busca admin para usar como "concedido_por"
    admin_id = await conn.fetchval("""
        SELECT u.id FROM usuario u 
        JOIN perfil p ON u.perfil_id = p.id 
        WHERE p.nome = 'Administrador' AND u.ativo = TRUE 
        LIMIT 1
    """)
    
    if not admin_id:
        print("⚠️ Nenhum administrador encontrado, usando ID 1 como padrão")
        admin_id = 1
    
    # Verifica se já existe migração
    existing_count = await conn.fetchval("SELECT COUNT(*) FROM usuario_perfil")
    
    if existing_count > 0:
        print(f"⚠️ Já existem {existing_count} registros na tabela usuario_perfil")
        resposta = input("Deseja continuar mesmo assim? (s/N): ").strip().lower()
        if resposta != 's':
            print("❌ Migração cancelada")
            return
    
    # Migra usuários
    users_to_migrate = await conn.fetch("""
        SELECT u.id, u.nome, u.perfil_id, p.nome as perfil_nome
        FROM usuario u
        LEFT JOIN perfil p ON u.perfil_id = p.id
        WHERE u.ativo = TRUE AND u.perfil_id IS NOT NULL
    """)
    
    migrated_count = 0
    
    for user in users_to_migrate:
        try:
            # Verifica se já foi migrado
            existing = await conn.fetchval("""
                SELECT 1 FROM usuario_perfil 
                WHERE usuario_id = $1 AND perfil_id = $2
            """, user['id'], user['perfil_id'])
            
            if existing:
                print(f"⏭️ Usuário {user['nome']} já migrado")
                continue
            
            # Insere na nova tabela
            await conn.execute("""
                INSERT INTO usuario_perfil (usuario_id, perfil_id, concedido_por_usuario_id, observacoes)
                VALUES ($1, $2, $3, $4)
            """, user['id'], user['perfil_id'], admin_id, 'Migração automática do sistema anterior')
            
            migrated_count += 1
            print(f"✅ Migrado: {user['nome']} → {user['perfil_nome']}")
            
        except Exception as e:
            print(f"❌ Erro ao migrar {user['nome']}: {e}")
    
    print(f"📊 Total migrado: {migrated_count} usuários")

async def validate_migration(conn: asyncpg.Connection):
    """Valida se a migração foi bem-sucedida"""
    
    print("\n🔍 Validando migração...")
    
    # Compara contagens
    users_with_old_profile = await conn.fetchval("""
        SELECT COUNT(*) FROM usuario 
        WHERE ativo = TRUE AND perfil_id IS NOT NULL
    """)
    
    users_with_new_profiles = await conn.fetchval("""
        SELECT COUNT(DISTINCT usuario_id) FROM usuario_perfil 
        WHERE ativo = TRUE
    """)
    
    print(f"📊 Usuários no sistema antigo: {users_with_old_profile}")
    print(f"📊 Usuários no sistema novo: {users_with_new_profiles}")
    
    if users_with_old_profile == users_with_new_profiles:
        print("✅ Migração validada com sucesso!")
    else:
        print("⚠️ Divergência encontrada na migração")
    
    # Mostra alguns exemplos
    print("\n👥 Exemplos de usuários migrados:")
    examples = await conn.fetch("""
        SELECT usuario_nome, perfis_texto 
        FROM v_usuario_perfis 
        WHERE perfis_texto IS NOT NULL
        LIMIT 5
    """)
    
    for example in examples:
        print(f"  • {example['usuario_nome']}: {example['perfis_texto']}")

async def create_example_multi_profile_user(conn: asyncpg.Connection):
    """Cria um usuário de exemplo com múltiplos perfis"""
    
    print("\n👤 Criando usuário de exemplo com múltiplos perfis...")
    
    # Busca IDs dos perfis
    perfil_gestor = await conn.fetchval("SELECT id FROM perfil WHERE nome = 'Gestor'")
    perfil_fiscal = await conn.fetchval("SELECT id FROM perfil WHERE nome = 'Fiscal'")
    admin_id = 1
    
    if not (perfil_gestor and perfil_fiscal):
        print("⚠️ Perfis Gestor/Fiscal não encontrados, pulando exemplo")
        return
    
    # Busca ou cria usuário exemplo
    usuario_exemplo = await conn.fetchrow("""
        SELECT id FROM usuario WHERE email = 'exemplo.multiperfil@sigescon.com'
    """)
    
    if not usuario_exemplo:
        from app.core.security import get_password_hash
        senha_hash = get_password_hash("senha123")
        
        usuario_id = await conn.fetchval("""
            INSERT INTO usuario (nome, email, cpf, senha_hash, perfil_id)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING id
        """, "João Multi Perfil", "exemplo.multiperfil@sigescon.com", "11122233344", senha_hash, perfil_gestor)
    else:
        usuario_id = usuario_exemplo['id']
    
    # Adiciona múltiplos perfis
    for perfil_id, perfil_nome in [(perfil_gestor, "Gestor"), (perfil_fiscal, "Fiscal")]:
        try:
            await conn.execute("""
                INSERT INTO usuario_perfil (usuario_id, perfil_id, concedido_por_usuario_id, observacoes)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (usuario_id, perfil_id) DO NOTHING
            """, usuario_id, perfil_id, admin_id, f"Exemplo de usuário com perfil {perfil_nome}")
            
            print(f"✅ Perfil {perfil_nome} adicionado ao usuário exemplo")
        except Exception as e:
            print(f"⚠️ Erro ao adicionar perfil {perfil_nome}: {e}")

async def show_migration_summary(conn: asyncpg.Connection):
    """Mostra resumo final da migração"""
    
    print("\n📈 RESUMO DA MIGRAÇÃO")
    print("=" * 50)
    
    # Statistics
    total_users = await conn.fetchval("SELECT COUNT(*) FROM usuario WHERE ativo = TRUE")
    users_with_profiles = await conn.fetchval("SELECT COUNT(DISTINCT usuario_id) FROM usuario_perfil WHERE ativo = TRUE")
    total_profile_assignments = await conn.fetchval("SELECT COUNT(*) FROM usuario_perfil WHERE ativo = TRUE")
    
    print(f"👥 Total de usuários ativos: {total_users}")
    print(f"🎭 Usuários com perfis atribuídos: {users_with_profiles}")
    print(f"📋 Total de atribuições de perfil: {total_profile_assignments}")
    
    # Profile distribution
    print("\n📊 DISTRIBUIÇÃO POR PERFIL:")
    profile_stats = await conn.fetch("""
        SELECT p.nome, COUNT(up.usuario_id) as total_usuarios
        FROM perfil p
        LEFT JOIN usuario_perfil up ON p.id = up.perfil_id AND up.ativo = TRUE
        WHERE p.ativo = TRUE
        GROUP BY p.id, p.nome
        ORDER BY total_usuarios DESC
    """)
    
    for stat in profile_stats:
        print(f"  • {stat['nome']}: {stat['total_usuarios']} usuários")
    
    # Multi-profile users
    multi_profile_users = await conn.fetch("""
        SELECT usuario_nome, perfis_texto
        FROM v_usuario_perfis
        WHERE array_length(perfis, 1) > 1
        ORDER BY usuario_nome
    """)
    
    if multi_profile_users:
        print(f"\n🎭 USUÁRIOS COM MÚLTIPLOS PERFIS ({len(multi_profile_users)}):")
        for user in multi_profile_users:
            print(f"  • {user['usuario_nome']}: {user['perfis_texto']}")
    else:
        print("\n🎭 Nenhum usuário com múltiplos perfis encontrado")
    
    print("\n✅ Migração concluída com sucesso!")
    print("\n💡 PRÓXIMOS PASSOS:")
    print("1. Teste as funcionalidades de perfis múltiplos")
    print("2. Adicione perfis adicionais aos usuários conforme necessário")
    print("3. Use os endpoints /api/v1/usuarios/{id}/perfis para gerenciar")
    print("4. Considere remover a coluna 'perfil_id' da tabela usuario após validação completa")

async def main():
    """Executa a migração completa"""
    
    print("🚀 SIGESCON - Migração para Sistema de Perfis Múltiplos")
    print("=" * 60)
    print(f"📅 Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    try:
        # Conecta ao banco
        conn = await asyncpg.connect(settings.DATABASE_URL)
        print("✅ Conectado ao banco de dados")
        
        # Executa migração
        await create_multiple_profiles_tables(conn)
        await migrate_existing_users(conn)
        await validate_migration(conn)
        await create_example_multi_profile_user(conn)
        await show_migration_summary(conn)
        
    except Exception as e:
        print(f"❌ Erro durante a migração: {e}")
        return 1
    
    finally:
        if 'conn' in locals():
            await conn.close()
            print("\n🔌 Conexão com banco encerrada")
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())