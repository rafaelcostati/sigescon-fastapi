#!/usr/bin/env python3
"""
Script para debugar problema de perfil incorreto sendo exibido
"""
import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()

async def debug_perfil_issue():
    """Debugar problema de perfil"""
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL n√£o encontrada no .env")
        return

    conn = await asyncpg.connect(database_url)

    try:
        print("üîç INVESTIGANDO PROBLEMA DE PERFIL")
        print("=" * 50)
        
        # 1. Verificar usu√°rios e seus perfis
        print("\n1Ô∏è‚É£ USU√ÅRIOS E PERFIS:")
        usuarios = await conn.fetch("""
            SELECT 
                u.id,
                u.nome,
                u.email,
                u.perfil_id as perfil_principal_id,
                p_principal.nome as perfil_principal_nome
            FROM usuario u
            LEFT JOIN perfil p_principal ON u.perfil_id = p_principal.id
            WHERE u.ativo = TRUE
            ORDER BY u.id
        """)
        
        for user in usuarios:
            print(f"   üë§ {user['nome']} ({user['email']})")
            print(f"      ID: {user['id']}")
            print(f"      Perfil Principal: {user['perfil_principal_nome']} (ID: {user['perfil_principal_id']})")
            
            # Verificar perfis dispon√≠veis via usuario_perfil
            perfis_disponiveis = await conn.fetch("""
                SELECT p.id, p.nome
                FROM usuario_perfil up
                JOIN perfil p ON up.perfil_id = p.id
                WHERE up.usuario_id = $1 AND up.ativo = TRUE AND p.ativo = TRUE
                ORDER BY p.id
            """, user['id'])
            
            perfis_formatados = [f"{p['nome']} (ID: {p['id']})" for p in perfis_disponiveis]
            print(f"      Perfis Dispon√≠veis: {perfis_formatados}")
            print()
        
        # 2. Verificar contextos de sess√£o ativos
        print("\n2Ô∏è‚É£ CONTEXTOS DE SESS√ÉO ATIVOS:")
        contextos = await conn.fetch("""
            SELECT 
                sc.id,
                sc.usuario_id,
                u.nome as usuario_nome,
                sc.perfil_ativo_id,
                p.nome as perfil_ativo_nome,
                sc.sessao_id,
                sc.data_criacao
            FROM session_context sc
            JOIN usuario u ON sc.usuario_id = u.id
            JOIN perfil p ON sc.perfil_ativo_id = p.id
            WHERE sc.ativo = TRUE
            ORDER BY sc.data_criacao DESC
        """)
        
        if contextos:
            for ctx in contextos:
                print(f"   üîë Sess√£o ID: {ctx['sessao_id'][:20]}...")
                print(f"      Usu√°rio: {ctx['usuario_nome']} (ID: {ctx['usuario_id']})")
                print(f"      Perfil Ativo: {ctx['perfil_ativo_nome']} (ID: {ctx['perfil_ativo_id']})")
                print(f"      Criado em: {ctx['data_criacao']}")
                print()
        else:
            print("   ‚ö†Ô∏è  Nenhum contexto de sess√£o ativo encontrado")
        
        # 3. Verificar se h√° inconsist√™ncias
        print("\n3Ô∏è‚É£ VERIFICANDO INCONSIST√äNCIAS:")
        
        # Verificar usu√°rios com perfil principal que n√£o est√° em usuario_perfil
        inconsistencias = await conn.fetch("""
            SELECT 
                u.id,
                u.nome,
                u.perfil_id,
                p.nome as perfil_nome
            FROM usuario u
            JOIN perfil p ON u.perfil_id = p.id
            WHERE u.ativo = TRUE 
            AND NOT EXISTS (
                SELECT 1 FROM usuario_perfil up 
                WHERE up.usuario_id = u.id 
                AND up.perfil_id = u.perfil_id 
                AND up.ativo = TRUE
            )
        """)
        
        if inconsistencias:
            print("   ‚ùå INCONSIST√äNCIAS ENCONTRADAS:")
            for inc in inconsistencias:
                print(f"      ‚Ä¢ {inc['nome']}: Perfil principal {inc['perfil_nome']} n√£o est√° em usuario_perfil")
        else:
            print("   ‚úÖ Nenhuma inconsist√™ncia encontrada")
        
        # 4. Verificar duplicatas na tabela usuario_perfil
        print("\n4Ô∏è‚É£ VERIFICANDO DUPLICATAS:")
        duplicatas = await conn.fetch("""
            SELECT usuario_id, perfil_id, COUNT(*) as count
            FROM usuario_perfil 
            WHERE ativo = TRUE
            GROUP BY usuario_id, perfil_id
            HAVING COUNT(*) > 1
        """)
        
        if duplicatas:
            print("   ‚ùå DUPLICATAS ENCONTRADAS:")
            for dup in duplicatas:
                print(f"      ‚Ä¢ Usu√°rio {dup['usuario_id']}, Perfil {dup['perfil_id']}: {dup['count']} registros")
        else:
            print("   ‚úÖ Nenhuma duplicata encontrada")
        
        # 5. Sugest√µes de corre√ß√£o
        print("\n5Ô∏è‚É£ SUGEST√ïES DE CORRE√á√ÉO:")
        
        if inconsistencias:
            print("   üîß Para corrigir inconsist√™ncias:")
            print("      1. Execute o comando para sincronizar perfis:")
            print("         UPDATE usuario SET perfil_id = (")
            print("           SELECT perfil_id FROM usuario_perfil")  
            print("           WHERE usuario_id = usuario.id AND ativo = TRUE")
            print("           ORDER BY data_concessao DESC LIMIT 1")
            print("         );")
            print()
            print("      2. Ou adicione os perfis principais em usuario_perfil:")
            for inc in inconsistencias:
                print(f"         INSERT INTO usuario_perfil (usuario_id, perfil_id, ativo, data_concessao)")
                print(f"         VALUES ({inc['id']}, {inc['perfil_id']}, TRUE, NOW());")
        
        print("\n6Ô∏è‚É£ COMANDOS PARA LIMPEZA (se necess√°rio):")
        print("   üßπ Limpar contextos de sess√£o antigos:")
        print("      DELETE FROM session_context WHERE data_criacao < NOW() - INTERVAL '1 day';")
        print()
        print("   üîÑ For√ßar novo login (limpar todas as sess√µes):")
        print("      DELETE FROM session_context;")
        
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(debug_perfil_issue())
