# app/services/password_reset_service.py

import asyncpg
from typing import Optional, Dict, Any
from fastapi import HTTPException, status

from app.repositories.password_reset_repo import PasswordResetRepository
from app.repositories.usuario_repo import UsuarioRepository
from app.services.email_service import EmailService
from app.core.security import get_password_hash
from app.core.config import settings


class PasswordResetService:
    """Service para gerenciar o fluxo de reset de senha"""

    def __init__(self, connection: asyncpg.Connection):
        self.conn = connection
        self.reset_repo = PasswordResetRepository(connection)
        self.user_repo = UsuarioRepository(connection)

    async def request_password_reset(self, email: str) -> Dict[str, Any]:
        """
        Processa solicita√ß√£o de reset de senha

        Args:
            email: Email do usu√°rio

        Returns:
            Dict com resultado da opera√ß√£o
        """
        # Busca usu√°rio pelo email
        user = await self.user_repo.get_user_by_email(email)

        if not user:
            # Por seguran√ßa, n√£o revelamos que o email n√£o existe
            # Mas registramos a tentativa para auditoria
            print(f"‚ö†Ô∏è Tentativa de reset para email n√£o cadastrado: {email}")
            return {
                "success": True,
                "message": "Solicita√ß√£o enviada! Instru√ß√µes para recuperar sua senha foram registradas."
            }

        if not user.get('ativo', True):
            # Usu√°rio inativo tamb√©m n√£o deve receber reset
            print(f"‚ö†Ô∏è Tentativa de reset para usu√°rio inativo: {email}")
            return {
                "success": True,
                "message": "Solicita√ß√£o enviada! Instru√ß√µes para recuperar sua senha foram registradas."
            }

        # Gera token de reset
        token = await self.reset_repo.create_reset_token(user['id'])

        # Envia email de reset
        email_sent = await self._send_reset_email(user, token)

        if not email_sent:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erro interno. Tente novamente mais tarde."
            )

        return {
            "success": True,
            "message": "Solicita√ß√£o enviada! Instru√ß√µes para recuperar sua senha foram registradas."
        }

    async def validate_reset_token(self, token: str) -> Dict[str, Any]:
        """
        Valida token de reset de senha

        Args:
            token: Token a ser validado

        Returns:
            Dict com resultado da valida√ß√£o
        """
        token_info = await self.reset_repo.validate_token(token)

        if not token_info:
            return {
                "valid": False,
                "message": "Token inv√°lido, expirado ou j√° utilizado."
            }

        return {
            "valid": True,
            "message": "Token v√°lido",
            "user_email": token_info['email']
        }

    async def reset_password(self, token: str, new_password: str) -> Dict[str, Any]:
        """
        Efetua o reset da senha usando o token

        Args:
            token: Token de reset
            new_password: Nova senha

        Returns:
            Dict com resultado da opera√ß√£o
        """
        # Valida token
        token_info = await self.reset_repo.validate_token(token)

        if not token_info:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Token inv√°lido, expirado ou j√° utilizado."
            )

        # Hash da nova senha
        password_hash = get_password_hash(new_password)

        # Atualiza senha do usu√°rio
        success = await self.user_repo.update_user_password_hash(
            token_info['usuario_id'],
            password_hash
        )

        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erro ao atualizar senha. Tente novamente."
            )

        # Marca token como usado
        await self.reset_repo.mark_token_as_used(token)

        # Envia email de confirma√ß√£o
        await self._send_password_changed_email(token_info)

        return {
            "success": True,
            "message": "Senha alterada com sucesso!"
        }

    async def _send_reset_email(self, user: Dict[str, Any], token: str) -> bool:
        """
        Envia email com link para reset de senha

        Args:
            user: Dados do usu√°rio
            token: Token de reset

        Returns:
            bool: True se email foi enviado
        """
        # Constr√≥i URL de reset (assumindo que o frontend ir√° lidar com isso)
        reset_url = f"{settings.FRONTEND_URL}/reset-password?token={token}" if hasattr(settings, 'FRONTEND_URL') else f"http://localhost:3000/reset-password?token={token}"

        subject = "üîí Solicita√ß√£o de Reset de Senha - SIGESCON"

        body = f"""
Ol√° {user['nome']},

Voc√™ solicitou a altera√ß√£o de sua senha no Sistema de Gest√£o de Contratos (SIGESCON).

Para criar uma nova senha, clique no link abaixo:
{reset_url}

OU use o c√≥digo diretamente no sistema:
{token}

‚ö†Ô∏è IMPORTANTE:
- Este link √© v√°lido por 24 horas
- Por seguran√ßa, use o link apenas uma vez
- Se voc√™ n√£o solicitou esta altera√ß√£o, ignore este email

Para sua seguran√ßa:
- Crie uma senha forte com pelo menos 6 caracteres
- N√£o compartilhe sua senha com ningu√©m
- Fa√ßa logout ao usar computadores compartilhados

Em caso de d√∫vidas, entre em contato com o administrador do sistema.

---
Sistema de Gest√£o de Contratos - SIGESCON
Este √© um email autom√°tico, n√£o responda.
        """

        return await EmailService.send_email(user['email'], subject, body)

    async def _send_password_changed_email(self, token_info: Dict[str, Any]) -> bool:
        """
        Envia email de confirma√ß√£o ap√≥s altera√ß√£o de senha

        Args:
            token_info: Informa√ß√µes do token usado

        Returns:
            bool: True se email foi enviado
        """
        subject = "‚úÖ Senha Alterada com Sucesso - SIGESCON"

        body = f"""
Ol√° {token_info['nome']},

Sua senha foi alterada com sucesso no Sistema de Gest√£o de Contratos (SIGESCON).

‚úÖ Altera√ß√£o realizada em: {token_info.get('used_at', 'agora')}
üìß Email da conta: {token_info['email']}

Se voc√™ n√£o realizou esta altera√ß√£o, entre em contato IMEDIATAMENTE com o administrador do sistema.

Para sua seguran√ßa:
- Fa√ßa login com sua nova senha
- Verifique se n√£o h√° sess√µes ativas indevidas
- Mantenha suas credenciais sempre seguras

---
Sistema de Gest√£o de Contratos - SIGESCON
Este √© um email autom√°tico, n√£o responda.
        """

        return await EmailService.send_email(token_info['email'], subject, body)